module CounterwParallelLoad(data_o, data_i, d_i, e_i, clk, load_i, cout);
    parameter BUS_WIDTH = 8; // Define bus width here
    
    input d_i, e_i, load_i, clk;
    input [BUS_WIDTH - 1:0] data_i;
    output [BUS_WIDTH - 1:0] data_o;
    output cout;

    wire d_i, e_i, load_i, clk, cout;
    wire [BUS_WIDTH - 1:0] data_i;
    wire [BUS_WIDTH - 1:0] data_o;

    // Internal wires declaration
    wire    [BUS_WIDTH - 1:0] HAS_Output;
    wire    [BUS_WIDTH - 1:0] Q_N;
    wire    [BUS_WIDTH - 1:0] Selector_Output;
    wire    [BUS_WIDTH - 1:0] HAS_Cout;
    wire    d_i_neg;

    not(d_i_neg, d_i);

    HAS [BUS_WIDTH - 1:0] HAS_Inst;

    HAS HAS_Inst[0](
        .D(d_i),
        .D_N(d_i_neg),
        .Q(data_o[0]),
        .Q_N(Q_N[0]),
        .Cin(e_i),
        .Cout(HAS_Cout[0]),
        .O(HAS_Output[0])
    );

    HAS HAS_Inst[BUS_WIDTH - 1](
        .D(d_i),
        .D_N(d_i_neg),
        .Q(data_o[BUS_WIDTH - 1]),
        .Q_N(Q_N[BUS_WIDTH - 1]),
        .Cin(HAS_Cout[BUS_WIDTH - 2]),
        .Cout(cout),
        .O(HAS_Output[BUS_WIDTH - 1])
    );

    HAS HAS_Inst[BUS_WIDTH - 2:1](
        .D(d_i),
        .D_N(d_i_neg),
        .Q(data_o[BUS_WIDTH - 2:1]),
        .Q_N(Q_N[BUS_WIDTH - 2:1]),
        .Cin(HAS_Cout[BUS_WIDTH - 3:0]),
        .Cout(HAS_Cout[BUS_WIDTH - 2:1]),
        .O(HAS_Output[BUS_WIDTH - 2:1])
    );

    Selector [BUS_WIDTH - 1:0] Selector_Inst(
        .data_o(Selector_Output),
        .dataA_i(HAS_Output),
        .dataB_i(data_i),
        .select_i(load_i)
    );

    DFF [BUS_WIDTH - 1:0] DFF_Inst(
        .Q(data_o),
        .Q_N(Q_N),
        .D(Selector_Output),
        .clk(clk)
    );

endmodule